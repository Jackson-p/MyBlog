{
  "labels": [
    {
      "name": "CSS"
    },
    {
      "name": "前端库与框架"
    },
    {
      "name": "js基础"
    },
    {
      "name": "工程"
    },
    {
      "name": "后端"
    }
  ],
  "issues": {
    "total_count": 5,
    "incomplete_results": false,
    "items": [
      {
        "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/40",
        "repository_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io",
        "labels_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/40/labels{/name}",
        "comments_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/40/comments",
        "events_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/40/events",
        "html_url": "https://github.com/Jackson-p/Jackson-p.github.io/issues/40",
        "id": 520618034,
        "node_id": "MDU6SXNzdWU1MjA2MTgwMzQ=",
        "number": 40,
        "title": "日常之css技巧",
        "user": {
          "login": "Jackson-p",
          "id": 20417123,
          "node_id": "MDQ6VXNlcjIwNDE3MTIz",
          "avatar_url": "https://avatars0.githubusercontent.com/u/20417123?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jackson-p",
          "html_url": "https://github.com/Jackson-p",
          "followers_url": "https://api.github.com/users/Jackson-p/followers",
          "following_url": "https://api.github.com/users/Jackson-p/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jackson-p/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jackson-p/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jackson-p/subscriptions",
          "organizations_url": "https://api.github.com/users/Jackson-p/orgs",
          "repos_url": "https://api.github.com/users/Jackson-p/repos",
          "events_url": "https://api.github.com/users/Jackson-p/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jackson-p/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1247499777,
            "node_id": "MDU6TGFiZWwxMjQ3NDk5Nzc3",
            "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/labels/CSS",
            "name": "CSS",
            "color": "2f98d9",
            "default": false,
            "description": "CSS"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-10T15:43:06Z",
        "updated_at": "2019-11-10T16:35:02Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "#### css 实现字体颜色渐变\r\n\r\nhttps://blog.csdn.net/FE_dev/article/details/78450844\r\n```css\r\nbackground: linear-gradient(to right, #FEE779 100%, #F9C93C 100%);\r\nbackground-clip: text;\r\ncolor: transparent;\r\n```\r\n\r\n#### css 遮挡modal效果\r\n\r\n```css\r\n    .cover{\r\n        background: rgba(0,0,0,0.70);\r\n        position: fixed;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100vh;\r\n        display: none;\r\n        z-index: 2;\r\n    }\r\n```\r\n#### css 实现图片自填充\r\n\r\n```css\r\n    img{\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n    }\r\n```\r\n\r\n#### css防止点击阴影出现\r\n\r\n> -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n#### css 文字渐变效果\r\n\r\n```css\r\nbackground: linear-gradient(to right, #FEE779 100%, #F9C93C 100%);\r\nbackground-clip: text;\r\ncolor: transparent;\r\n```\r\n\r\n#### 高度自适应\r\n\r\n> height设为0， padding-bottom百分比是根据占宽度百分比计算的\r\n\r\n#### css计数器\r\n\r\n```css\r\nul {\r\n    counter-reset: section;\r\n}\r\nli {\r\n    counter-increment: section;\r\n    content: \"li \" counter(section) \":\" ;\r\n}\r\n```\r\n\r\n#### css 文本溢出省略号\r\n\r\n```css\r\noverflow: hidden;\r\ntext-overflow:ellipsis;\r\nwhite-space: nowrap;\r\n```",
        "score": 1.0
      },
      {
        "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/20",
        "repository_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io",
        "labels_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/20/labels{/name}",
        "comments_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/20/comments",
        "events_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/20/events",
        "html_url": "https://github.com/Jackson-p/Jackson-p.github.io/issues/20",
        "id": 414022611,
        "node_id": "MDU6SXNzdWU0MTQwMjI2MTE=",
        "number": 20,
        "title": "常见终端适配方案",
        "user": {
          "login": "Jackson-p",
          "id": 20417123,
          "node_id": "MDQ6VXNlcjIwNDE3MTIz",
          "avatar_url": "https://avatars0.githubusercontent.com/u/20417123?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jackson-p",
          "html_url": "https://github.com/Jackson-p",
          "followers_url": "https://api.github.com/users/Jackson-p/followers",
          "following_url": "https://api.github.com/users/Jackson-p/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jackson-p/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jackson-p/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jackson-p/subscriptions",
          "organizations_url": "https://api.github.com/users/Jackson-p/orgs",
          "repos_url": "https://api.github.com/users/Jackson-p/repos",
          "events_url": "https://api.github.com/users/Jackson-p/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jackson-p/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1247499777,
            "node_id": "MDU6TGFiZWwxMjQ3NDk5Nzc3",
            "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/labels/CSS",
            "name": "CSS",
            "color": "2f98d9",
            "default": false,
            "description": "CSS"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-02-25T10:00:20Z",
        "updated_at": "2019-02-25T10:00:20Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "# 终端适配\r\n\r\n__前言__:\r\n以前使用过的移动端适配方案大多是直接用Boostrap这种响应式框架和非常简单的媒体查询（定两个尺寸后）开发两套代码，对比较火热的rem布局，meta的使用都不甚了解，而终端适配方案是很重要很重要的，总结下。\r\n\r\n## 方案们\r\n\r\n### 方案一：meta标签调整HTML网页文档属性\r\n\r\n我们通常会用到这样的一行\r\n\r\n```HTML\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum=scale=1,user-scalable=no\" />\r\n```\r\n\r\n其中\r\nwidth：控制 viewport 的大小，可以指定的一个值，如果 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。\r\nheight：和 width 相对应，指定高度。\r\ninitial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。\r\nmaximum-scale：允许用户缩放到的最大比例。\r\nminimum-scale：允许用户缩放到的最小比例。\r\nuser-scalable：用户是否可以手动缩放\r\n即无视设备的真实分辨率，直接通过dpi，在物理尺寸和浏览器之间重设分辨率，这个分辨率和设备的分辨率无关。比如，你拿个3.5寸-320*480的iphone3 gs、3.5寸-640*960的iphone4或者9.7寸-1024*768的ipad2，虽然设备的分辨率不同,物理尺寸也不同，但你可以通过设置viewport让它们在浏览器里有相同的分辨率。比如说，你的网站是800px宽，你可以通过设置viewport的width=800，来让你的网站在这三个不同的设备上都刚好满屏显示你的网站。\r\n那么这个方案实际使用时，可以将width=device-width那里设置成针对网页比较合适的定值。(注意此时就不要在设定initial-scale了，部分浏览器不支持)\r\n\r\n```HTML\r\n    <meta name=\"viewport\" content=\"width=640,user-scalable=no\" />\r\n```\r\n\r\n> 优点：\r\n\r\n    较为简单，可以直接解决几乎所有终端问题\r\n\r\n> 缺点：\r\n\r\n    这样做实际上就是把整个网页等比缩小了，高清屏不清晰，所有表现形式在不同手机上都一样，简单说就是简单粗暴统一\r\n\r\n> 补充概念：\r\n\r\n    visual viewport 可见视口 屏幕宽度\r\n    layout viewport 布局视口 DOM宽度\r\n    ideal viewport 理想适口：使布局视口就是可见视口\r\n    设备宽度(visual viewport)与DOM宽度(layout viewport), scale的关系为：\r\n\r\n    （visual viewport）= （layout viewport）* scale\r\n    获取屏幕宽度(visual viewport)的尺寸：window. innerWidth/Height。\r\n    获取DOM宽度(layout viewport)的尺寸：document. documentElement. clientWidth/Height。\r\n\r\n### 方案二：rem vm、vh等css单位\r\n\r\n> 基础：\r\n\r\n    em是指当前字体大小占父元素的百分比，比如父元素是16px，子元素0.75em就是12px\r\n    vw(view-width),表示视区宽度，总宽度为100vw\r\n    vh(view-height),表示视区高度，总高度为100vh\r\n    rem是CSS3新增的一个相对单位，与em相同的仍是相对大小，但相对的只是HTML根元素。这些浏览器会忽略用rem设定的字体大小。通常会结合js调整或者媒体查询使用\r\n\r\n> rem优点\r\n\r\n    这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。\r\n\r\n> rem缺点\r\n\r\n    IE9以下不支持\r\n\r\n> rem举例\r\n\r\n```css\r\n    html{\r\n        font-size:32px;\r\n    }\r\n    .btn {\r\n        height: 1.2rem;\r\n        line-height: 1.2rem;\r\n        font-size: 0.43rem;\r\n        margin:0 2rem;\r\n        background: #06c;\r\n        color: #fff;\r\n        border-radius: 5px;\r\n        text-decoration: none;\r\n        text-align: center;\r\n        letter-spacing:0.2rem;\r\n    }\r\n```\r\n\r\n> rem使用(js调整版)[阿里开源](https://github.com/amfe/lib-flexible)\r\n\r\n```js\r\n(function flexible (window, document) {\r\n  var docEl = document.documentElement\r\n  var dpr = window.devicePixelRatio || 1\r\n\r\n  // adjust body font size\r\n  function setBodyFontSize () {\r\n    if (document.body) {\r\n      document.body.style.fontSize = (12 * dpr) + 'px'\r\n    }\r\n    else {\r\n      document.addEventListener('DOMContentLoaded', setBodyFontSize)\r\n    }\r\n  }\r\n  setBodyFontSize();\r\n\r\n  // set 1rem = viewWidth / 10\r\n  function setRemUnit () {\r\n    var rem = docEl.clientWidth / 10\r\n    docEl.style.fontSize = rem + 'px'\r\n  }\r\n\r\n  setRemUnit()\r\n\r\n  // reset rem unit on page resize\r\n  window.addEventListener('resize', setRemUnit)\r\n  window.addEventListener('pageshow', function (e) {\r\n    if (e.persisted) {\r\n      setRemUnit()\r\n    }\r\n  })\r\n\r\n  // detect 0.5px supports\r\n  if (dpr >= 2) {\r\n    var fakeBody = document.createElement('body')\r\n    var testElement = document.createElement('div')\r\n    testElement.style.border = '.5px solid transparent'\r\n    fakeBody.appendChild(testElement)\r\n    docEl.appendChild(fakeBody)\r\n    if (testElement.offsetHeight === 1) {\r\n      docEl.classList.add('hairlines')\r\n    }\r\n    docEl.removeChild(fakeBody)\r\n  }\r\n}(window, document))\r\n```\r\n\r\n>vw与vh\r\n\r\n    将视口宽度分为100份，每份是1vw。视口高度分为100份，每份是1vh.听说在损失少部分兼容性的情况下，全体使用vw与vh可以实现流体排版。“通过利用视口单位实现适配的页面，是既能解决响应式断层问题，又能解决脚本依赖的问题的”\r\n\r\n### flex布局\r\n\r\n* [阮一峰教学](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html);\r\n\r\n### CSS3媒体查询\r\n\r\n## 适配方面代码\r\n\r\n> 简单用js判断是移动端还是PC端\r\n\r\n    if(/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\r\n        //is phone do sth\r\n    } else {\r\n        //is PC do sth;\r\n    }\r\n\r\n## 参考\r\n\r\n* [Flexible手淘H5页面](https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html)\r\n\r\n* [em与px](https://www.w3cplus.com/css/px-to-em)\r\n\r\n* [rem自适应布局](http://caibaojian.com/rem-responsive-2.html)",
        "score": 1.0
      },
      {
        "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/19",
        "repository_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io",
        "labels_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/19/labels{/name}",
        "comments_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/19/comments",
        "events_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/19/events",
        "html_url": "https://github.com/Jackson-p/Jackson-p.github.io/issues/19",
        "id": 414022427,
        "node_id": "MDU6SXNzdWU0MTQwMjI0Mjc=",
        "number": 19,
        "title": "常见布局汇总",
        "user": {
          "login": "Jackson-p",
          "id": 20417123,
          "node_id": "MDQ6VXNlcjIwNDE3MTIz",
          "avatar_url": "https://avatars0.githubusercontent.com/u/20417123?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jackson-p",
          "html_url": "https://github.com/Jackson-p",
          "followers_url": "https://api.github.com/users/Jackson-p/followers",
          "following_url": "https://api.github.com/users/Jackson-p/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jackson-p/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jackson-p/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jackson-p/subscriptions",
          "organizations_url": "https://api.github.com/users/Jackson-p/orgs",
          "repos_url": "https://api.github.com/users/Jackson-p/repos",
          "events_url": "https://api.github.com/users/Jackson-p/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jackson-p/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1247499777,
            "node_id": "MDU6TGFiZWwxMjQ3NDk5Nzc3",
            "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/labels/CSS",
            "name": "CSS",
            "color": "2f98d9",
            "default": false,
            "description": "CSS"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-02-25T09:59:56Z",
        "updated_at": "2019-02-25T09:59:56Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "# 布局\r\n\r\n__前言__:感觉布局还是很重要的熟记平时的布局可以提高开发速度，包括flux、gird这些有时间要深入一些\r\n\r\n## 三栏布局(含圣杯、双飞翼)\r\n\r\n[请见](https://blog.csdn.net/jikexueyuan5555/article/details/81078052)\r\nps:\r\n\r\n* 没错只有table和grid是container 100%的.\r\n\r\n* 圣杯和双飞翼都是三个float,main,left,right。\r\n\r\n* 圣杯是一个container两边留白，main占满，左右上移后至main两端，relative到main两侧。\r\n\r\n* 双飞翼就是在圣杯的基础上把留白和后调去掉。\r\n\r\n## 水平垂直居中\r\n\r\n> relatvie中absolute+margin：auto调整\r\n\r\n```HTML\r\n<div style=\"width:200px;height:200px;border:solid blue;position:relative;\">\r\n         <div style=\"width:100px;height:100px;margin: auto;  position: absolute;  top: 0; left: 0; bottom: 0; right: 0; background: red;\"></div>\r\n</div>\r\n```\r\n\r\n>table-cell+vertical-align:middle+text-align:center\r\n\r\n```HTML\r\n<div style=\"width:200px;height:200px;border:2px solid #000;display:table-cell;vertical-align:middle;text-align: center;\">\r\n     <div style=\"width:100px;height:100px;display:inline-block;background-color: red;\"></div>\r\n</div>\r\n```\r\n\r\n>flex实现水平垂直居中\r\n\r\n```HTML\r\n<div style=\"width:200px;height:200px; border:2px solid #000;display:flex;justify-content:center;align-items:center;\">\r\n     <div style=\"width:100px;height:100px;background-color: red;\"></div>\r\n </div>\r\n```\r\n\r\n>用百分比大调再用margin微调（需已知当前div的宽高）\r\n\r\n```HTML\r\n<div style=\"width:200px;height:200px; border:2px solid #000;position:relative;\">\r\n     <div style=\"width:100px;height:100px;margin:auto;position:absolute;left:50%;top:50%;margin-left: -50px;margin-top:-50px;background-color: red;\"></div>\r\n </div>\r\n```\r\n\r\n>升级版用css3打调后，transform微调（不需要宽高）\r\n\r\n```HTML\r\n<div style=\"width:200px;height:200px;border:2px solid #000;\">\r\n        <div style=\"width:100px;height:100px;background-color: red;margin-top: 50%;margin-left: 50%;transform: translate(-50%,-50%)\"></div>\r\n</div>\r\n```\r\n\r\nPS：\r\n\r\n有关于这个问题我想补充说明一点，其实上述的水平垂直居中的方案即使是反过来把父元素position变成absolute把子元素变成relative其实也是效果不变的，但是往往这样会给自己造成思维误区，这个问题体现在哪儿呢？absolute的定位问题。。。。。如果是正常情况下是相对于浏览器定位的嘛，如果父元素是relative的话，那么子元素position是absolute就是相对于父元素定位的。\r\n\r\n## BFC及双栏布局\r\n\r\n[BFC原理](https://www.jianshu.com/p/acf76871d259)\r\n\r\n[双栏布局方法](https://segmentfault.com/a/1190000010415257)\r\n\r\n-----\r\n\r\n## 其他布局\r\n\r\n### 九宫格布局\r\n\r\n>方法一：自己的数学？（硬画）\r\n\r\n```HTML\r\n<!DOCTYPE html>  \r\n<html>  \r\n<head>  \r\n<style type=\"text/css\">\r\n    #container{\r\n        margin: auto;\r\n        width:666px;\r\n        border: 1px solid black;\r\n        height:666px;\r\n        position:relative;\r\n    }\r\n    #row{\r\n        height:222px;\r\n        width: 666px;\r\n        border-top: 1px solid black;\r\n        border-bottom: 1px solid black;\r\n        position: absolute;\r\n        top:222px;\r\n    }\r\n    #col{\r\n        width:222px;\r\n        height:666px;\r\n        border-left: 1px solid black;\r\n        border-right: 1px solid black;\r\n        position: absolute;\r\n        left:222px;\r\n    }\r\n</style>\r\n</head>  \r\n<body>  \r\n<div id=\"container\">\r\n        <div id=\"row\"></div>\r\n        <div id=\"col\"></div>\r\n</div>\r\n</body>  \r\n</html>\r\n```\r\n\r\n>方法二：正常的连续float\r\n\r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <style type=\"text/css\">\r\n        .wrap {\r\n            padding: 10px 0 0 10px;\r\n            width: 300px;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .wrap .item {\r\n            position: relative;\r\n            float: left;\r\n            margin-left: -10px;\r\n            margin-top: -10px;\r\n            width: 80px;\r\n            height: 80px;\r\n            line-height: 80px;\r\n            text-align: center;\r\n            border: 10px solid #ccc;\r\n        }\r\n\r\n        .wrap .item:hover {\r\n            z-index: 2;\r\n            border-color: #f00;\r\n        }\r\n    </style>\r\n    <script>\r\n    </script>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"wrap\">\r\n        <div class=\"item\">1</div>\r\n        <div class=\"item\">2</div>\r\n        <div class=\"item\">3</div>\r\n        <div class=\"item\">4</div>\r\n        <div class=\"item\">5</div>\r\n        <div class=\"item\">6</div>\r\n        <div class=\"item\">7</div>\r\n        <div class=\"item\">8</div>\r\n        <div class=\"item\">9</div>\r\n    </div>\r\n</body>\r\n\r\n</html>\r\n\r\n> 方法三：CSS3的属性表达式calc\r\n\r\n```HTML\r\n\r\n<!DOCTYPE html>  \r\n<html>  \r\n<head>  \r\n<style type=\"text/css\">\r\n    #container{\r\n        margin: auto;\r\n        width:666px;\r\n        border: 1px solid black;\r\n        height:666px;\r\n    }\r\n    .item{\r\n        margin:10px;\r\n        width:calc(33.33% - 20px);\r\n        height:calc(33.33% - 20px);\r\n        background-color:aqua;\r\n        text-align: center;\r\n        line-height:201.97px;\r\n        float: left;\r\n        font-weight: bold;\r\n        color:#ffffff;\r\n        font-size:24px;\r\n    }\r\n    .item:hover{\r\n        z-index:2;\r\n        box-shadow: 10px 10px 5px #888888;\r\n    }\r\n</style>\r\n</head>  \r\n<body>  \r\n<div id=\"container\">\r\n        <div class=\"item\">1</div>\r\n        <div class=\"item\">2</div>\r\n        <div class=\"item\">3</div>\r\n        <div class=\"item\">4</div>\r\n        <div class=\"item\">5</div>\r\n        <div class=\"item\">6</div>\r\n        <div class=\"item\">7</div>\r\n        <div class=\"item\">8</div>\r\n        <div class=\"item\">9</div>\r\n</div>\r\n</body>  \r\n</html>\r\n\r\n```\r\n",
        "score": 1.0
      },
      {
        "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/18",
        "repository_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io",
        "labels_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/18/labels{/name}",
        "comments_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/18/comments",
        "events_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/18/events",
        "html_url": "https://github.com/Jackson-p/Jackson-p.github.io/issues/18",
        "id": 414022241,
        "node_id": "MDU6SXNzdWU0MTQwMjIyNDE=",
        "number": 18,
        "title": "兼容性方案",
        "user": {
          "login": "Jackson-p",
          "id": 20417123,
          "node_id": "MDQ6VXNlcjIwNDE3MTIz",
          "avatar_url": "https://avatars0.githubusercontent.com/u/20417123?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jackson-p",
          "html_url": "https://github.com/Jackson-p",
          "followers_url": "https://api.github.com/users/Jackson-p/followers",
          "following_url": "https://api.github.com/users/Jackson-p/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jackson-p/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jackson-p/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jackson-p/subscriptions",
          "organizations_url": "https://api.github.com/users/Jackson-p/orgs",
          "repos_url": "https://api.github.com/users/Jackson-p/repos",
          "events_url": "https://api.github.com/users/Jackson-p/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jackson-p/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1247499777,
            "node_id": "MDU6TGFiZWwxMjQ3NDk5Nzc3",
            "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/labels/CSS",
            "name": "CSS",
            "color": "2f98d9",
            "default": false,
            "description": "CSS"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-02-25T09:59:30Z",
        "updated_at": "2019-02-25T09:59:30Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "# 兼容性方案\r\n\r\n## 兼容性代码\r\n\r\n### 有关渲染模式，标准模式or怪异模式？\r\n\r\n>标准模式和怪异模式在盒模型上的差异\r\n\r\n    标准CSS盒模型的宽度和高度等于内容区的高度和宽度，不包含内边距和边框.\r\n    而IE6之前的浏览器实现的盒模型的宽高计算方式是包含内边距和边框的。\r\n    因此，对于IE，怪异模式和标准模式下的盒模型宽高计算方式是不一样的；\r\n\r\n> 解决scroll up 兼容性代码\r\n\r\n```js\r\nfunction get_scrollTop_of_body(){\r\n    var scrollTop;\r\n    if(typeof window.pageYOffset != 'undefined'){//pageYOffset指的是滚动条顶部到网页顶部的距离\r\n        scrollTop = window.pageYOffset;\r\n    }else if(typeof document.compatMode != 'undefined' && document.compatMode != 'BackCompat')        {//compatMode=='BackCompat'说明是怪异模式，compatMode=='CSS1Compat'说明是标准模式\r\n        scrollTop = document.documentElement.scrollTop;\r\n    }else if(typeof document.body != 'undefined'){\r\n        scrollTop = document.body.scrollTop;\r\n    }\r\n    return scrollTop;\r\n}\r\n```\r\n\r\n由此引出的解决兼容性的方案之一就是判断他的当前文档渲染方式，根据这个文档渲染判断方式，我们还可以得出这样的应用：“准确获取网页客户区的宽高、滚动条宽高、滚动条Left和Top的代码。\r\n\r\n```js\r\nif (document.compatMode == \"BackCompat\")\r\n{\r\n　　cWidth = document.body.clientWidth;\r\n　　cHeight = document.body.clientHeight;\r\n　　sWidth = document.body.scrollWidth;\r\n　　sHeight = document.body.scrollHeight;\r\n　　sLeft = document.body.scrollLeft;\r\n　　sTop = document.body.scrollTop;\r\n}\r\nelse\r\n{\r\n　　//document.compatMode == \"CSS1Compat\"\r\n　　cWidth = document.documentElement.clientWidth;\r\n　　cHeight = document.documentElement.clientHeight;\r\n　　sWidth = document.documentElement.scrollWidth;\r\n　　sHeight = document.documentElement.scrollHeight;\r\n　　sLeft = document.documentElement.scrollLeft == 0 ? document.body.scrollLeft : document.documentElement.scrollLeft;\r\n　　sTop = document.documentElement.scrollTop == 0 ? document.body.scrollTop : document.documentElement.scrollTop;\r\n}\r\n```\r\nps:话说在对兼容性解决还不错的jQuery里面的scrollTop的解决方案很简单，只是一个pageYOffset而已,是不是分析复杂了hhhh\r\n\r\n> 兼容各个浏览器的事件监听代码\r\n\r\n```js\r\n\r\nEventUtil={\r\n  addListener:function(target,type,handler){\r\n    if(target.addEventListener){\r\n        target.addEventListener(type,handler);\r\n    }else if(target.attachEvent){\r\n        target.attach(\"on\"+type,function(){\r\n              handler.call(target);  //让handler中的this指向目标元素\r\n        });\r\n    }else{\r\n        target[\"on\"+type]=handler;\r\n    }\r\n  },\r\n removeListener:function(target,type,handler){   \r\n      if(target.removeEventListener){    \r\n        target.removeEventListener(type,handler);          \r\n     }else if(target.detachEvent){\r\n        target.detachEvent(\"on\"+type,handler);\r\n     }else{\r\n        target[\"on\"+type]=null;\r\n     }\r\n  },\r\n getEvent:function(e){      //获取事件对象\r\n     var evt=window.event||e;\r\n     return evt;\r\n },\r\n getTarget:function(e){      //获得目标对象\r\n     var evt=EventUtil.getEvent(e);\r\n     var target;\r\n     if(evt.target){ target=evt.target;}\r\n     else {target=evt.srcElement;}\r\n     return target;\r\n },\r\n stopPropagation:function(e){  //停止冒泡\r\n     var evt=EventUtil.getEvent(e);\r\n     if(evt.stopPropagation) {evt.stopPropagation();}\r\n     else {evt.cancelBubble=true;}\r\n },\r\n preventDefault:function(e){   //阻值默认行为的发生\r\n     var evt=EventUtil.getEvent(e);\r\n     if(evt.preventDefault){ evt.preventDefault(); }\r\n     else {e.returnValue=false;}\r\n }\r\n}\r\n```",
        "score": 1.0
      },
      {
        "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/12",
        "repository_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io",
        "labels_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/12/labels{/name}",
        "comments_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/12/comments",
        "events_url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/issues/12/events",
        "html_url": "https://github.com/Jackson-p/Jackson-p.github.io/issues/12",
        "id": 414020765,
        "node_id": "MDU6SXNzdWU0MTQwMjA3NjU=",
        "number": 12,
        "title": "CSS3 稍冷知识(积累)",
        "user": {
          "login": "Jackson-p",
          "id": 20417123,
          "node_id": "MDQ6VXNlcjIwNDE3MTIz",
          "avatar_url": "https://avatars0.githubusercontent.com/u/20417123?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jackson-p",
          "html_url": "https://github.com/Jackson-p",
          "followers_url": "https://api.github.com/users/Jackson-p/followers",
          "following_url": "https://api.github.com/users/Jackson-p/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jackson-p/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jackson-p/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jackson-p/subscriptions",
          "organizations_url": "https://api.github.com/users/Jackson-p/orgs",
          "repos_url": "https://api.github.com/users/Jackson-p/repos",
          "events_url": "https://api.github.com/users/Jackson-p/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jackson-p/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 1247499777,
            "node_id": "MDU6TGFiZWwxMjQ3NDk5Nzc3",
            "url": "https://api.github.com/repos/Jackson-p/Jackson-p.github.io/labels/CSS",
            "name": "CSS",
            "color": "2f98d9",
            "default": false,
            "description": "CSS"
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-02-25T09:56:19Z",
        "updated_at": "2019-02-25T09:56:19Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "# CSS3 稍冷知识\r\n\r\n不得不说CSS的琐碎点实在是有点儿多，看着啥记录啥的，望不断更新。\r\n\r\n## input 取消光圈+常规操作\r\n\r\n```HTML\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n\t<meta charset=\"UTF-8\">\r\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n\t<title>Document</title>\r\n</head>\r\n<body>\r\n\t<div class=\"liao\">\r\n\t\t<div class=\"liaoin\">\r\n\t\t\t<input type=\"text\">\r\n\t\t</div>\r\n\t</div>\r\n</body>\r\n<style>\r\n.liao{\r\n\twidth: 100%;\r\n\theight: 500px;\r\n\tbackground-color: cadetblue;\r\n\tposition: relative;\r\n}\r\n.liaoin{\r\n\tposition: absolute;\r\n\twidth: 800px;\r\n\theight: 300px;\r\n\tline-height: 300px;\r\n\tmargin: auto;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tbottom: 0;\r\n\tright: 0;\r\n\tbackground-color: azure;\r\n\ttext-align: center;\r\n}\r\n.liaoin input{\r\n\t/* margin: auto; */\r\n\toutline: none;\r\n\theight: 20px;\r\n\tline-height: 20px;\r\n\tpadding: 9px;\r\n}\r\n</style>\r\n</html>\r\n```\r\n\r\n## CSS预处理语言Less\r\n\r\n这个有时间再好好看下，只会用基础的orz\r\n\r\n## nth-of-child和nth-of-type\r\n\r\np:nth-child(2) 要求该元素是p元素，且是父元素的第二个子元素\r\n\r\np:nth-of-type(2) 要求该元素是父元素下的第二个p元素\r\n\r\n## 清除浮动的各种方法\r\n\r\n### 父级div定义伪类：after和zoom\r\n\r\n```HTML\r\n<style type=\"text/css\"> \r\n   .div1{background:#000080;border:1px solid red;}\r\n   .div2{background:#800080;border:1px solid red;height:100px;margin-top:10px}\r\n   \r\n   .left{float:left;width:20%;height:200px;background:#DDD}\r\n   .right{float:right;width:30%;height:80px;background:#DDD}\r\n   \r\n   /*清除浮动代码*/\r\n   .clearfloat:after{display:block;clear:both;content:\"\";visibility:hidden;height:0}\r\n   .clearfloat{zoom:1}\r\n   </style> \r\n<div class=\"div1 clearfloat\"> \r\n<div class=\"left\">Left</div> \r\n<div class=\"right\">Right</div> \r\n</div>\r\n<div class=\"div2\">\r\n   div2\r\n   </div>\r\n```\r\n\r\n### 在结尾处添加空div标签clear:both\r\n\r\n```HTML\r\n<style type=\"text/css\"> \r\n   .div1{background:#000080;border:1px solid red}\r\n   .div2{background:#800080;border:1px solid red;height:100px;margin-top:10px}\r\n   \r\n   .left{float:left;width:20%;height:200px;background:#DDD}\r\n   .right{float:right;width:30%;height:80px;background:#DDD}\r\n   \r\n   /*清除浮动代码*/\r\n   .clearfloat{clear:both}\r\n   </style> \r\n<div class=\"div1\"> \r\n<div class=\"left\">Left</div> \r\n<div class=\"right\">Right</div>\r\n<div class=\"clearfloat\"></div>\r\n</div>\r\n<div class=\"div2\">\r\n   div2\r\n   </div>\r\n```\r\n\r\n### 父级div定义height\r\n\r\n```HTML\r\n<style type=\"text/css\"> \r\n   .div1{background:#000080;border:1px solid red;/*解决代码*/height:200px;}\r\n   .div2{background:#800080;border:1px solid red;height:100px;margin-top:10px}\r\n   \r\n   .left{float:left;width:20%;height:200px;background:#DDD}\r\n   .right{float:right;width:30%;height:80px;background:#DDD}\r\n   </style> \r\n<div class=\"div1\"> \r\n<div class=\"left\">Left</div> \r\n<div class=\"right\">Right</div> \r\n</div>\r\n<div class=\"div2\">\r\n   div2\r\n   </div>\r\n```\r\n\r\n### 父级div定义overflow:hidden\r\n\r\nPS:overflow:auto也是可以清除浮动的\r\n\r\n```HTML\r\n<style type=\"text/css\"> \r\n   .div1{background:#000080;border:1px solid red;/*解决代码*/width:98%;overflow:hidden}\r\n   .div2{background:#800080;border:1px solid red;height:100px;margin-top:10px;width:98%}\r\n   \r\n   .left{float:left;width:20%;height:200px;background:#DDD}\r\n   .right{float:right;width:30%;height:80px;background:#DDD}\r\n   </style> \r\n<div class=\"div1\"> \r\n<div class=\"left\">Left</div> \r\n<div class=\"right\">Right</div>\r\n</div>\r\n<div class=\"div2\">\r\n   div2\r\n   </div>\r\n```\r\n\r\n### 父级div跟着浮动\r\n\r\nemmmmmm\r\n\r\n## 会用到而又难搞的css效果\r\n\r\n选自《CSS揭秘》这本书，看起来还是有些晦涩难懂\r\n\r\n[在线效果](http://play.csssecrets.io/)\r\n",
        "score": 1.0
      }
    ]
  }
}
